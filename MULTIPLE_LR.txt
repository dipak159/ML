	MACHINE LEARNINIG-(UNKNOWN DIPAK)
-------------------------------LINEAR R------------------------------

import pandas as pd
import numpy as np

dataset = pd.read_csv('student_scores.csv')

X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, 1].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

y_pred = regressor.predict(X_test)

from sklearn import metrics
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

-------------------------------LOGISTIC R----------------------------

import pandas as pd
import numpy as np

dataset = pd.read_csv("User_Data.csv")

x = dataset.iloc[:, [2, 3]].values
y = dataset.iloc[:, 4].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.20, random_state = 0)

from sklearn.preprocessing import StandardScaler
sc_x = StandardScaler()
xtrain = sc_x.fit_transform(X_train)
xtest = sc_x.transform(X_test)

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(xtrain, y_train)

y_pred = classifier.predict(xtest)

y_pred
from sklearn.metrics import accuracy_score
print ("Accuracy : ", accuracy_score(y_test, y_pred))

-------------------------------D TREE--------------------------------

import pandas as pd
import numpy as np

dataset = pd.read_csv("User_Data.csv")

x = dataset.iloc[:, [2, 3]].values
y = dataset.iloc[:, 4].values

from sklearn.model_selection import train_test_split
x_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.20, random_state = 0)

from sklearn.preprocessing import StandardScaler
sc_x = StandardScaler()
xtrain = sc_x.fit_transform(X_train)
xtest = sc_x.transform(X_test)

#Fitting Decision Tree classifier to the training set 
from sklearn.tree import DecisionTreeClassifier 
classifier= DecisionTreeClassifier(criterion='entropy', random_state=0) 
classifier.fit(xtrain, y_train) 

y_pred = classifier.predict(xtest)
y_pred

#Creating the Confusion matrix 
from sklearn.metrics import confusion_matrix 
cm= confusion_matrix(y_test, y_pred) 
cm

from sklearn.metrics import accuracy_score
print ("Accuracy : ", accuracy_score(y_test, y_pred))

-------------------------------MULTIPLE LR---------------------------

import pandas as pd
import numpy as np

dataset = pd.read_csv('house_data.csv')
dataset.shape

X = dataset.iloc[:,[2,5]].values
y = dataset.iloc[:, -1].values
X

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

X_train
X_test
y_pred = regressor.predict(X_test)
y_pred

from sklearn import metrics
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

-------------------------------SVM-----------------------------------

import pandas as pd
import numpy as np

dataset = pd.read_csv("User_Data.csv")
x = dataset.iloc[:, [2, 3]].values
y = dataset.iloc[:, 4].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.20, random_state = 0)

from sklearn.preprocessing import StandardScaler
sc_x = StandardScaler()
xtrain = sc_x.fit_transform(X_train)
xtest = sc_x.transform(X_test)

from sklearn.svm import SVC # "Support vector classifier" 
classifier = SVC(kernel='linear', random_state=0) 
classifier.fit(xtrain, y_train)

y_pred = classifier.predict(xtest)
y_pred

#Creating the Confusion matrix 
from sklearn.metrics import confusion_matrix 
cm= confusion_matrix(y_test, y_pred) 
cm

from sklearn.metrics import accuracy_score
print ("Accuracy : ", accuracy_score(y_test, y_pred))

-------------------------------KNN-----------------------------------

import numpy as np
import pandas as pd

names = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'Class']

# Read dataset to pandas dataframe
dataset = pd.read_csv("iris.csv", names=names)

dataset.head()

X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, 4].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(X_train)

X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=5)
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))